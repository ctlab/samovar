import random
import os
import glob

configfile: "config.yaml"

# Initialize genomes list if it's empty
if not config['genomes']:
    genome_files = glob.glob(os.path.join(config['genome_dir'], "*.fna"))
    config['genomes'] = [os.path.basename(g).replace('.fna', '') for g in genome_files]
    print(f"Found genomes: {config['genomes']}")

random.seed(config['seed'])

# Create a list of concrete output files
SAMPLES = [str(i) for i in range(1, config['n_samples'] + 1)]
OUTPUT_FILES = []
for sample in SAMPLES:
    OUTPUT_FILES.append(f"{config['output_dir']}/{sample}_full_R1.fastq")
    OUTPUT_FILES.append(f"{config['output_dir']}/{sample}_full_R2.fastq")

# Main rule to generate all samples - MUST BE FIRST RULE
rule all:
    input:
        OUTPUT_FILES,
        f"{config['output_dir']}/.cleanup_complete"

# Cleanup rule to remove temporary files
rule cleanup:
    input:
        OUTPUT_FILES
    output:
        touch(f"{config['output_dir']}/.cleanup_complete")
    params:
        outdir = config['output_dir']
    shell:
        """
        rm -f {params.outdir}/*_host_*.fastq
        rm -f {params.outdir}/*_[A-Za-z0-9]*_R[12].fastq
        rm -f {params.outdir}/*_cont_*
        rm -f {params.outdir}/*_abundance*
        rm -f {params.outdir}/*_vcf || true
        """

def get_host_reads(wildcards):
    if config['host_fraction'] == "RANDOM":
        return random.randint(0, config['total_reads'])
    return int(config['host_fraction'] * config['total_reads'])

def get_meta_reads(wildcards):
    if config['host_fraction'] == "RANDOM":
        return random.randint(0, config['total_reads'])
    return int((1 - config['host_fraction']) * config['total_reads'])

# Function to get genome name from path
def get_genome_name(wildcards):
    return wildcards.genome

# Function to get sample number
def get_sample_number(wildcards):
    return wildcards.sample

# Rule to generate host reads
rule generate_host_reads:
    output:
        r1 = f"{config['output_dir']}/{{sample}}_host_R1.fastq",
        r2 = f"{config['output_dir']}/{{sample}}_host_R2.fastq"
    params:
        n_reads = get_host_reads,
        outdir = config['output_dir'],
        host_genome = config['host_genome']
    shell:
        """
        mkdir -p {params.outdir}
        iss generate \
            --genomes {params.host_genome} \
            --model hiseq \
            --output {params.outdir}/{wildcards.sample}_host \
            --n_reads {params.n_reads}
        """

# Rule to generate reads for a single genome
rule generate_metagenome_reads:
    input:
        genome = lambda wildcards: f"{config['genome_dir']}/{wildcards.genome}.fna"
    output:
        r1 = f"{config['output_dir']}/{{sample}}_{{genome}}_R1.fastq",
        r2 = f"{config['output_dir']}/{{sample}}_{{genome}}_R2.fastq"
    params:
        n_reads = get_meta_reads,
        outdir = config['output_dir']
    shell:
        """
        mkdir -p {params.outdir}
        iss generate \
            --genomes {input.genome} \
            --model hiseq \
            --output {params.outdir}/{wildcards.sample}_{wildcards.genome} \
            --n_reads {params.n_reads}
        """

# Rule to concatenate all reads for a sample - this generates the final output files
rule concatenate_reads:
    input:
        host_r1 = lambda wildcards: f"{config['output_dir']}/{wildcards.sample}_host_R1.fastq",
        host_r2 = lambda wildcards: f"{config['output_dir']}/{wildcards.sample}_host_R2.fastq",
        meta_r1 = lambda wildcards: expand(f"{config['output_dir']}/{wildcards.sample}_{{genome}}_R1.fastq", genome=config['genomes']),
        meta_r2 = lambda wildcards: expand(f"{config['output_dir']}/{wildcards.sample}_{{genome}}_R2.fastq", genome=config['genomes'])
    output:
        r1 = f"{config['output_dir']}/{{sample}}_full_R1.fastq",
        r2 = f"{config['output_dir']}/{{sample}}_full_R2.fastq"
    shell:
        """
        # Concatenate R1 files
        cat {input.host_r1} > {output.r1}
        for f in {input.meta_r1}; do
            cat $f >> {output.r1}
        done
        
        # Concatenate R2 files
        cat {input.host_r2} > {output.r2}
        for f in {input.meta_r2}; do
            cat $f >> {output.r2}
        done
        """ 
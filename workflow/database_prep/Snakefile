import os
import glob
from pathlib import Path
from samovar.fasta_processor import process_fasta

# Configuration
configfile: "config.yaml"

# Get all input FASTA files from specified directories
def get_input_files(wildcards):
    input_files = []
    for directory in config["input_dir"]:
        input_files.extend(glob.glob(os.path.join(directory, "*.fna")))
        input_files.extend(glob.glob(os.path.join(directory, "*.fasta")))
    return input_files

# Get input file path for a given output file
def get_input_path(wildcards):
    for directory in config["input_dir"]:
        # Try both .fna and .fasta extensions
        for ext in [".fna", ".fasta"]:
            input_path = os.path.join(directory, wildcards.input_file + ext)
            if os.path.exists(input_path):
                return input_path
    raise ValueError(f"Input file for {wildcards.input_file} not found in any input directory")

# Rule to process all FASTA files
rule all:
    input:
        expand(config["output_dir"] + "/{input_file}.processed.fasta",
               input_file=[Path(f).stem for f in get_input_files(None)])

# Rule to process individual FASTA files
rule prepare_fasta:
    input:
        lambda wildcards: get_input_path(wildcards)
    output:
        config["output_dir"] + "/{input_file}.processed.fasta"
    params:
        outdir=lambda wildcards: config["output_dir"],
        mutation_rate=lambda wildcards: config["mutation_rate"],
        include_percent=lambda wildcards: config["include_percent"]
    run:
        os.makedirs(params.outdir, exist_ok=True)
        process_fasta(input[0], output[0], params.mutation_rate, params.include_percent) 
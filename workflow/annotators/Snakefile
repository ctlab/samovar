import os
import glob

# Load configuration
configfile: "config_init.yaml"

# Get all samples from input directories
def get_samples():
    r1_files = glob.glob(os.path.join(config['r1_dir'], "*_R1.fastq"))
    return [os.path.basename(f).replace('_R1.fastq', '') for f in r1_files]

# Get all annotator outputs needed
def get_annotator_outputs():
    outputs = []
    for run in config['run_config']:
        if run['type'] == 'kraken2':
            outputs.extend(expand(os.path.join(config['output_dir'], f"{{sample}}_{{run_name}}.{{ext}}"),
                                run_name=run['run_name'],
                                sample=get_samples(),
                                ext=['kraken2.report', 'kraken2.out']))
        elif run['type'] == 'kraken':
            outputs.extend(expand(os.path.join(config['output_dir'], f"{{sample}}_{{run_name}}.{{ext}}"),
                                run_name=run['run_name'],
                                sample=get_samples(),
                                ext=['kraken.out']))
        elif run['type'] == 'krakenuniq':
            outputs.extend(expand(os.path.join(config['output_dir'], f"{{sample}}_{{run_name}}.{{ext}}"),
                                run_name=run['run_name'],
                                sample=get_samples(),
                                ext=['krakenuniq.out']))
        elif run['type'] == 'kaiju':
            outputs.extend(expand(os.path.join(config['output_dir'], f"{{sample}}_{{run_name}}.{{ext}}"),
                                run_name=run['run_name'],
                                sample=get_samples(),
                                ext=['kaiju.out']))
        elif run['type'] == 'metaphlan4':
            outputs.extend(expand(os.path.join(config['output_dir'], f"{{sample}}_{{run_name}}.metaphlan4.out"),
                                run_name=run['run_name'],
                                sample=get_samples()))
    return outputs

# Main rule
rule all:
    input:
        get_annotator_outputs()

# Kraken2 rule
rule kraken2:
    input:
        r1 = lambda wildcards: f"{config['r1_dir']}/{wildcards.sample}_R1.fastq",
        r2 = lambda wildcards: f"{config['r2_dir']}/{wildcards.sample}_R2.fastq"
    output:
        report = f"{config['output_dir']}/{{sample}}_{{run_name}}.kraken2.report",
        out = f"{config['output_dir']}/{{sample}}_{{run_name}}.kraken2.out"
    params:
        db = lambda wildcards: next(run['db_path'] for run in config['run_config'] if run['run_name'] == wildcards.run_name),
        threads = lambda wildcards: next(run['threads'] if run.get('threads') else 1 for run in config['run_config'] if run['run_name'] == wildcards.run_name),
        extra = lambda wildcards: next(run['extra'] if run.get('extra') else "" for run in config['run_config'] if run['run_name'] == wildcards.run_name),
        cmd = lambda wildcards: next(run['cmd'] if run.get('cmd') else "kraken2" for run in config['run_config'] if run['run_name'] == wildcards.run_name)
    shell:
        """
        mkdir -p $(dirname {output.report})
        {params.cmd} \
            --use-names \
            --db {params.db} \
            --threads {params.threads} \
            --paired {input.r1} {input.r2} \
            --report {output.report} \
            --output {output.out} \
            {params.extra}
        """

# Kraken rule
rule kraken:
    input:
        r1 = lambda wildcards: f"{config['r1_dir']}/{wildcards.sample}_R1.fastq",
        r2 = lambda wildcards: f"{config['r2_dir']}/{wildcards.sample}_R2.fastq"
    output:
        out = f"{config['output_dir']}/{{sample}}_{{run_name}}.kraken.out"
    params:
        db = lambda wildcards: next(run['db_path'] for run in config['run_config'] if run['run_name'] == wildcards.run_name),
        threads = lambda wildcards: next(run['threads'] if run.get('threads') else 1 for run in config['run_config'] if run['run_name'] == wildcards.run_name),
        extra = lambda wildcards: next(run['extra'] if run.get('extra') else "" for run in config['run_config'] if run['run_name'] == wildcards.run_name),
        cmd = lambda wildcards: next(run['cmd'] if run.get('cmd') else "kraken" for run in config['run_config'] if run['run_name'] == wildcards.run_name)
    shell:
        """
        mkdir -p $(dirname {output.out})
        {params.cmd} \
            --db {params.db} \
            --threads {params.threads} \
            --paired {input.r1} {input.r2} \
            --output {output.out} \
            {params.extra}
        """

# KrakenUnique rule
rule krakenuniq:
    input:
        r1 = lambda wildcards: f"{config['r1_dir']}/{wildcards.sample}_R1.fastq",
        r2 = lambda wildcards: f"{config['r2_dir']}/{wildcards.sample}_R2.fastq"
    output:
        out = f"{config['output_dir']}/{{sample}}_{{run_name}}.krakenuniq.out"
    params:
        db = lambda wildcards: next(run['db_path'] for run in config['run_config'] if run['run_name'] == wildcards.run_name),
        threads = lambda wildcards: next(run['threads'] if run.get('threads') else 1 for run in config['run_config'] if run['run_name'] == wildcards.run_name),
        extra = lambda wildcards: next(run['extra'] if run.get('extra') else "" for run in config['run_config'] if run['run_name'] == wildcards.run_name),
        cmd = lambda wildcards: next(run['cmd'] if run.get('cmd') else "kraken" for run in config['run_config'] if run['run_name'] == wildcards.run_name)
    shell:
        """
        mkdir -p $(dirname {output.out})
        {params.cmd} \
            --db {params.db} \
            --threads {params.threads} \
            --paired {input.r1} {input.r2} \
            --output {output.out} \
            {params.extra}
        """

# Kaiju rule
rule kaiju:
    input:
        r1 = lambda wildcards: f"{config['r1_dir']}/{wildcards.sample}_R1.fastq",
        r2 = lambda wildcards: f"{config['r2_dir']}/{wildcards.sample}_R2.fastq"
    output:
        out = f"{config['output_dir']}/{{sample}}_{{run_name}}.kaiju.out"
    params:
        db = lambda wildcards: get_run_config(wildcards, 'db_path'),
        db_file = lambda wildcards: get_db_file(wildcards),
        db_nodes = lambda wildcards: get_run_config(wildcards, 'db_nodes', os.path.dirname(get_db_file(wildcards)) + "/nodes.dmp"),
        threads = lambda wildcards: get_run_config(wildcards, 'threads', 1),
        extra = lambda wildcards: get_run_config(wildcards, 'extra', ""),
        cmd = lambda wildcards: get_run_config(wildcards, 'cmd', "kaiju")
    shell:
        """
        mkdir -p $(dirname {output.out})
        {params.cmd} \
            -t {params.db_nodes} \
            -f {params.db_file} \
            -i {input.r1} \
            -j {input.r2} \
            -z {params.threads} \
            -o {output.out} \
            {params.extra}
        """

# Metaphlan rule
rule metaphlan4:
    input:
        r1 = lambda wildcards: f"{config['r1_dir']}/{wildcards.sample}_R1.fastq",
        r2 = lambda wildcards: f"{config['r2_dir']}/{wildcards.sample}_R2.fastq"
    output:
        out = f"{config['output_dir']}/{{sample}}_{{run_name}}.metaphlan4.out",
        out_raw = f"{config['output_dir']}/{{sample}}_{{run_name}}.metaphlan4.raw",
        out_bowtie = f"{config['output_dir']}/{{sample}}_{{run_name}}.bowtie2.bz2"
    params:
        threads = lambda wildcards: next(run['threads'] if run.get('threads') else 1 for run in config['run_config'] if run['run_name'] == wildcards.run_name),
        extra = lambda wildcards: next(run['extra'] if run.get('extra') else "" for run in config['run_config'] if run['run_name'] == wildcards.run_name),
        cmd = lambda wildcards: next(run['cmd'] if run.get('cmd') else "metaphlan" for run in config['run_config'] if run['run_name'] == wildcards.run_name)
    shell:
        """
        mkdir -p $(dirname {output.out})
        {params.cmd} \
            --input_type fastq \
            --nproc {params.threads} \
            -1 {input.r1} \
            -2 {input.r2} \
            --bowtie2out {output.out_bowtie} \
            -o {output.out_raw} {params.extra}
            
        # Extract read IDs and marker gene IDs from bowtie2 output
        bzcat {output.out_bowtie} | \
            awk -F'\t' '{{print $1 "\t" $3}}' > {output.out}
        """

def get_run_config(wildcards, field, default=None):
    """Helper function to get run configuration value with optional default."""
    return next((run.get(field, default) for run in config['run_config'] if run['run_name'] == wildcards.run_name), default)

def get_db_file(wildcards):
    """Helper function to get database file path with proper extension handling."""
    run = next((run for run in config['run_config'] if run['run_name'] == wildcards.run_name), None)
    if not run:
        return None
    if run.get('db_name'):
        return os.path.join(run['db_path'], run['db_name'])
    if os.path.basename(run['db_path']).endswith('.fmi'):
        return run['db_path']
    return run['db_path'] + "/*.fmi"
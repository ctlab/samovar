import os
import glob
import pandas as pd
from pathlib import Path
from samovar.table2iss import parse_annotation_table, process_annotation_table
from samovar.genome_fetcher import fetch_genome
import re
import logging

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configuration
configfile: "config.yaml"

# Input and output directories
ANNOTATION = config["annotation_table"]
GENOME_DIR = config["genome_dir"]
OUTPUT_DIR = config["output_dir"]
EMAIL = config["email"]
READ_LENGTH = config["read_length"]
COVERAGE = config["coverage"]
MODEL = config.get("model", "hiseq")

# Create output directories
os.makedirs(OUTPUT_DIR, exist_ok=True)
os.makedirs(GENOME_DIR, exist_ok=True)

# Get list of annotators from the annotation table
def get_annotators():
    df = pd.read_csv(ANNOTATION)
    sample_name = "full"
    taxid_cols = []
    for col in df.columns:
        if 'taxID_' in col.lower():
            match = re.search(r'taxID_(.*?)(?:_[0-9]*)?$', col)
            if match:
                taxid_cols.append(match.group(1))
    return taxid_cols

# Main rule to process annotations for each annotator
rule process_annotations:
    input:
        annotation_table = ANNOTATION
    output:
        # Output files will be in annotator-specific directories
        fastqs = expand(os.path.join(OUTPUT_DIR, "full_{annotator}_R{read}.fastq"),
                       annotator=get_annotators(),
                       read=[1, 2])
    run:
        # Process annotations
        try:
            process_annotation_table(
                table_path=ANNOTATION,
                genome_dir=GENOME_DIR,
                output_dir=OUTPUT_DIR,
                email=EMAIL,
                reference_only=True,
                model=MODEL,
                read_length=READ_LENGTH,
                sample_name="full",
                mode="direct"
                )
            logger.info(f"Successfully processed annotations")
        
        except Exception as e:
            logger.error(f"Error processing annotations: {str(e)}")
            raise

# Main rule to run the entire workflow
rule all:
    input:
        rules.process_annotations.output.fastqs
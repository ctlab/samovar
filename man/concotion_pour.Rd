% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/concotion_pour.R
\name{concotion_pour}
\alias{concotion_pour}
\title{Build samovar object}
\usage{
concotion_pour(
  samovar_data,
  inner_method = "glm",
  inter_method = "glm",
  inner_model = "gaussian",
  inter_model = "gaussian",
  minimal_cluster = 2,
  probability_calculation = "oriented",
  cluster_connection = "mean"
)
}
\arguments{
\item{samovar_data}{samovar data after preprocessing stages}

\item{inner_method}{Character, glm, other to be implemented (bootstrap, bsPCA)}

\item{inter_method}{Character, glm, other to be implemented (bootstrap, bsPCA)}

\item{inner_model}{Character, model processed by glm(). For glm mode only}

\item{inter_model}{Character, model processed by glm(). For glm mode only}

\item{cluster_connection}{Character (mean, median), or function. The way of cluster connection. If function, way of summarize all samples of species cluster}

\item{network}{FALSE or graph that can be used for generation. To be implemented}

\item{cooccurrence}{Character, co-occurrence calculation.
\if{html}{\out{<br>}}
\if{html}{\out{<br>}}If "simple", calculated as:
\if{html}{\out{<br>}}P(A|B) = sum(A&B)/sum(A|B).
\if{html}{\out{<br>}}
\if{html}{\out{<br>}}If "oriented", calculated as
\if{html}{\out{<br>}}P(A|B) = P(A&B|B)}
}
\description{
Samovar network is a 2D-oriented graph with metadata and abundances of species per sample. Oriented graph could be used for network prediction, or for better generation some network could be used as initial (to be implemented)
For better understanding of building database and using it in generation, visit github source
}
\examples{
# download data
teatree <- GMrepo_type2data(number_to_process = 2000)

# filter
tealeaves <- teatree \%>\%
  teatree_trim(treshhold_species = 3, treshhold_samples = 3, treshhold_amount = 10^(-3))

# normalizing
## if you build teatree by your own, rescaling stage when building via teatree$rescale() or assigning teatree$min_value and teatree$max_value is required
## good approximation to normal distribution is required for glm generating methods
teabag <- tealeaves \%>\%
  tealeaves_pack(normalization_function = function(x) log10(x+1))

# clustering
concotion <- teabag \%>\%
  teabag_brew(min_cluster_size = 4, max_cluster_size = 6)
# remember: if you want to refilter, it is better to re-do welding stage to avoid crashes in future!

# building samovar
samovar <- concotion \%>\%
  concotion_pour()
}
